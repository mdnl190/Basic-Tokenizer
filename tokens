
#
include
<
stdio
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
string
.
h
>
#
include
<
ctype
.
h
>
#
define
STRMAX
40
#
define
SONGMAX
1024
/* Structures~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
struct
Song
{
char
title
[
STRMAX
]
;
char
artist
[
STRMAX
]
;
int
year_published
;
}
;
/* Global Variables~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
struct
Song
music_library
[
SONGMAX
]
;
int
current_number_of_songs
=
0
;
/* Functions~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
void
error
(
const
char
*
msg
)
{
printf
(
"ERROR: %s\n"
,
msg
)
;
}
char
*
getName
(
int
x
,
char
*
args
[
]
)
{
if
(
x
<
=
2
)
/*user did not specify music library; use default*/
return
(
"MyMusic"
)
;
else
/*user did specify music library*/
return
(
args
[
1
]
)
;
}
/*can print a prompt, then read a character from the user using getchar().  
 Skip any whitespace characters (space, tab, newline)*/
int
read_command
(
const
char
*
name
)
{
int
n
;
/*this one's for you, Nisarg*/
printf
(
"%s Command: "
,
name
)
;
int
c
=
getchar
(
)
;
while
(
(
n
=
getchar
(
)
)
!
=
'\n'
&&
n
!
=
EOF
)
;
return
(
toupper
(
c
)
)
;
}
/*handle writing and reading songs from a specified file*/
int
read_song
(
)
{
return
1
;
}
/*handle writing songs from a specified file*/
void
write_song
(
char
*
title
,
char
*
artist
,
int
year
,
int
i
)
{
strcpy
(
music_library
[
i
]
.
title
,
title
)
;
strcpy
(
music_library
[
i
]
.
artist
,
artist
)
;
music_library
[
i
]
.
year_published
=
year
;
}
/*load a named MusicLibrary file into the memory MusicLibrary*/
void
load_MusicLibrary
(
FILE
*
file
)
{
if
(
file
!
=
NULL
)
{
for
(
int
i
=
0
;
i
<
current_number_of_songs
;
++
i
)
{
fprintf
(
file
,
"%s,%s,%d\n"
,
music_library
[
i
]
.
title
,
music_library
[
i
]
.
artist
,
music_library
[
i
]
.
year_published
)
;
}
}
}
/*store a named MusicLibrary file into the memory MusicLibrary*/
void
store_MusicLibrary
(
FILE
*
file
)
{
char
title
[
STRMAX
]
,
artist
[
STRMAX
]
;
int
year
,
i
=
0
;
while
(
fscanf
(
file
,
"%s,%s,%d\n"
,
title
,
artist
,
&
year
)
!
=
EOF
)
{
write_song
(
title
,
artist
,
year
,
i
)
;
i
++
;
}
}
void
print_MusicLibrary
(
)
{
for
(
int
i
=
0
;
i
<
current_number_of_songs
;
++
i
)
{
printf
(
"%d. Title: %s, Artist: %s, Year Published: %d\n"
,
i
+
1
,
music_library
[
i
]
.
title
,
music_library
[
i
]
.
artist
,
music_library
[
i
]
.
year_published
)
;
}
}
/*9 line function*/
/*returns the location of the song with the specified name (used by remove
  and lookup)*/
int
find_index_of_song_with_name
(
const
char
*
name
,
int
begin
,
int
end
)
{
while
(
begin
<
=
end
)
{
int
i
=
begin
+
(
end
-
1
)
/
2
;
if
(
strcmp
(
music_library
[
i
]
.
title
,
name
)
=
=
0
)
return
i
;
if
(
strcmp
(
music_library
[
i
]
.
title
,
name
)
<
0
)
begin
=
++
i
;
else
end
=
--
i
;
}
return
begin
;
}
void
remove_last_song
(
)
{
int
i
=
current_number_of_songs
-
1
;
strcpy
(
music_library
[
i
]
.
title
,
" "
)
;
strcpy
(
music_library
[
i
]
.
artist
,
" "
)
;
music_library
[
i
]
.
year_published
=
0
;
}
void
crunch_up_from_index
(
int
i
)
{
for
(
int
j
=
i
+
1
;
i
<
(
current_number_of_songs
-
1
)
;
++
i
,
++
j
)
{
strcpy
(
music_library
[
i
]
.
title
,
music_library
[
j
]
.
title
)
;
strcpy
(
music_library
[
i
]
.
artist
,
music_library
[
j
]
.
artist
)
;
music_library
[
i
]
.
year_published
=
music_library
[
j
]
.
year_published
;
}
remove_last_song
(
)
;
}
void
crunch_down_from_index
(
int
i
)
{
for
(
int
j
=
current_number_of_songs
,
k
=
current_number_of_songs
-
1
;
j
>
i
;
--
j
,
--
k
)
{
strcpy
(
music_library
[
j
]
.
title
,
music_library
[
k
]
.
title
)
;
strcpy
(
music_library
[
j
]
.
artist
,
music_library
[
k
]
.
artist
)
;
music_library
[
j
]
.
year_published
=
music_library
[
k
]
.
year_published
;
}
}
void
remove_song_from_MusicLibrary_by_name
(
const
char
*
name
)
{
int
i
=
find_index_of_song_with_name
(
name
,
0
,
current_number_of_songs
)
;
crunch_up_from_index
(
i
)
;
--
current_number_of_songs
;
}
/*takes a song and puts it in the MusicLibrary in memory in the proper location*/
void
add_song_to_MusicLibrary
(
char
*
song
,
char
*
artist
,
int
year
)
{
int
index
=
find_index_of_song_with_name
(
song
,
0
,
current_number_of_songs
-
1
)
;
crunch_down_from_index
(
index
)
;
strcpy
(
music_library
[
index
]
.
title
,
song
)
;
strcpy
(
music_library
[
index
]
.
artist
,
artist
)
;
music_library
[
index
]
.
year_published
=
year
;
++
current_number_of_songs
;
}
FILE
*
open_file
(
const
char
*
fileName
,
const
char
*
fileMode
)
{
FILE
*
myFile
=
fopen
(
fileName
,
fileMode
)
;
/*load Music Library from file*/
/
/
store_MusicLibrary
(
myFile
)
;
return
myFile
;
}
char
*
getTitle
(
char
*
title
)
{
printf
(
"Title: "
)
;
scanf
(
" %s"
,
title
)
;
}
char
*
getArtist
(
)
{
char
temp
[
STRMAX
]
;
printf
(
"Artist: "
)
;
char
*
artist
=
temp
;
scanf
(
"%s"
,
artist
)
;
return
artist
;
}
int
getYear
(
)
{
printf
(
"Year Published: "
)
;
int
year
;
scanf
(
"%d"
,
&
year
)
;
return
year
;
}
void
getSongInfo
(
)
{
char
title
[
STRMAX
]
;
getTitle
(
title
)
;
char
*
artist
=
getArtist
(
)
;
int
year
=
getYear
(
)
;
add_song_to_MusicLibrary
(
title
,
artist
,
year
)
;
}
/*can take a command character and decide which command it is, then do the appropriate action.*/
void
evaluate_command
(
int
command
,
FILE
*
file
)
{
char
title
[
STRMAX
]
;
switch
(
command
)
{
case
' '
:
case
'\t'
:
case
'\n'
:
break
;
/*Insert a new song, prompt for title, artist, and year published, maintain the list in ascending 
 		alphabetical order by song title, ignore letter case when doing comparisons, but retain letter case 
		in all stored information*/
case
'I'
:
getSongInfo
(
)
;
break
;
/*print out all the entries in this MusicLibrary*/
case
'P'
:
print_MusicLibrary
(
)
;
break
;
/*delete a specified song, prompt for the title of the song to be deleted, delete all matching songs*/
case
'D'
:
printf
(
"Title of the song you wish to delete: "
)
;
scanf
(
"%s"
,
title
)
;
remove_song_from_MusicLibrary_by_name
(
title
)
;
break
;
/*lookup the song for a specified title, prompt for the title to look-up, use binary search which 
 		only works on sorted list.*/
case
'L'
:
getTitle
(
title
)
;
int
i
=
find_index_of_song_with_name
(
title
,
0
,
current_number_of_songs
)
;
printf
(
"Title: %s, Artist: %s, Year Published: %d\n"
,
music_library
[
i
]
.
title
,
music_library
[
i
]
.
artist
,
music_library
[
i
]
.
year_published
)
;
break
;
/*save the current MusicLibrary to its file and exit (quit) the program.*/
case
'Q'
:
load_MusicLibrary
(
file
)
;
/
/
fclose
(
file
)
;
break
;
default
:
error
(
"Invalid Command"
)
;
break
;
}
}
/* Main Function~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
int
main
(
int
argC
,
char
*
argV
[
]
)
{
/*variables*/
int
command
;
/*get Music Library name and open file*/
char
*
name
=
getName
(
argC
,
argV
)
;
FILE
*
myFile
=
open_file
(
name
,
"r"
)
;
/*main loop*/
do
{
/*get command from user and evaluate*/
command
=
read_command
(
name
)
;
evaluate_command
(
command
,
myFile
)
;
}
while
(
command
!
=
'Q'
)
;
return
0
;
}
